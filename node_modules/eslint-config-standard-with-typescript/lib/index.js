"use strict";
module.exports = {
    extends: 'eslint-config-standard',
    parserOptions: {
        ecmaFeatures: {
            // https://github.com/standard/eslint-config-standard/issues/95
            jsx: false
        }
    },
    plugins: ['typescript'],
    overrides: [
        {
            files: ['*.ts'],
            rules: {
                'camelcase': ['warn', { properties: 'never' }],
                'no-array-constructor': 'off',
                'no-undef': 'off',
                'no-unused-vars': 'off',
                'no-useless-constructor': 'warn',
                'typescript/adjacent-overload-signatures': 'error',
                'typescript/explicit-function-return-type': 'error',
                'typescript/explicit-member-accessibility': 'error',
                'typescript/member-delimiter-style': ['error', { delimiter: 'none' }],
                'typescript/no-angle-bracket-type-assertion': 'error',
                'typescript/no-array-constructor': 'error',
                'typescript/no-empty-interface': 'error',
                'typescript/no-namespace': 'error',
                'typescript/no-non-null-assertion': 'error',
                'typescript/no-triple-slash-reference': 'error',
                'typescript/no-unused-vars': 'error',
                'typescript/no-use-before-define': ['error', { functions: false, classes: false, variables: false, typedefs: false }],
                'typescript/no-var-requires': 'error',
                'typescript/type-annotation-spacing': 'error'
            }
        }
    ]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLGlCQUFTO0lBQ1AsT0FBTyxFQUFFLHdCQUF3QjtJQUNqQyxhQUFhLEVBQUU7UUFDYixZQUFZLEVBQUU7WUFDWiwrREFBK0Q7WUFDL0QsR0FBRyxFQUFFLEtBQUs7U0FDWDtLQUNGO0lBQ0QsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDO0lBQ3ZCLFNBQVMsRUFBRTtRQUNUO1lBQ0UsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDO1lBQ2YsS0FBSyxFQUFFO2dCQUNMLFdBQVcsRUFBRSxDQUFDLE1BQU0sRUFBRSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsQ0FBQztnQkFDOUMsc0JBQXNCLEVBQUUsS0FBSztnQkFDN0IsVUFBVSxFQUFFLEtBQUs7Z0JBQ2pCLGdCQUFnQixFQUFFLEtBQUs7Z0JBQ3ZCLHdCQUF3QixFQUFFLE1BQU07Z0JBQ2hDLHlDQUF5QyxFQUFFLE9BQU87Z0JBQ2xELDBDQUEwQyxFQUFFLE9BQU87Z0JBQ25ELDBDQUEwQyxFQUFFLE9BQU87Z0JBQ25ELG1DQUFtQyxFQUFFLENBQUMsT0FBTyxFQUFFLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxDQUFDO2dCQUNyRSw0Q0FBNEMsRUFBRSxPQUFPO2dCQUNyRCxpQ0FBaUMsRUFBRSxPQUFPO2dCQUMxQywrQkFBK0IsRUFBRSxPQUFPO2dCQUN4Qyx5QkFBeUIsRUFBRSxPQUFPO2dCQUNsQyxrQ0FBa0MsRUFBRSxPQUFPO2dCQUMzQyxzQ0FBc0MsRUFBRSxPQUFPO2dCQUMvQywyQkFBMkIsRUFBRSxPQUFPO2dCQUNwQyxpQ0FBaUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsQ0FBQztnQkFDckgsNEJBQTRCLEVBQUUsT0FBTztnQkFDckMsb0NBQW9DLEVBQUUsT0FBTzthQUM5QztTQUNGO0tBQ0Y7Q0FDRixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ID0ge1xuICBleHRlbmRzOiAnZXNsaW50LWNvbmZpZy1zdGFuZGFyZCcsXG4gIHBhcnNlck9wdGlvbnM6IHtcbiAgICBlY21hRmVhdHVyZXM6IHtcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zdGFuZGFyZC9lc2xpbnQtY29uZmlnLXN0YW5kYXJkL2lzc3Vlcy85NVxuICAgICAganN4OiBmYWxzZVxuICAgIH1cbiAgfSxcbiAgcGx1Z2luczogWyd0eXBlc2NyaXB0J10sXG4gIG92ZXJyaWRlczogW1xuICAgIHtcbiAgICAgIGZpbGVzOiBbJyoudHMnXSxcbiAgICAgIHJ1bGVzOiB7XG4gICAgICAgICdjYW1lbGNhc2UnOiBbJ3dhcm4nLCB7IHByb3BlcnRpZXM6ICduZXZlcicgfV0sIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9taWdodHlpYW0vZXNsaW50LWNvbmZpZy1zdGFuZGFyZC13aXRoLXR5cGVzY3JpcHQvaXNzdWVzLzNcbiAgICAgICAgJ25vLWFycmF5LWNvbnN0cnVjdG9yJzogJ29mZicsIC8vIGluIGZhdm9yIG9mIFR5cGVTY3JpcHQgcnVsZVxuICAgICAgICAnbm8tdW5kZWYnOiAnb2ZmJywgLy8gVHlwZVNjcmlwdCBoYXMgdGhpcyBmdW5jdGlvbmFsaXR5IGJ5IGRlZmF1bHRcbiAgICAgICAgJ25vLXVudXNlZC12YXJzJzogJ29mZicsIC8vIFR5cGVTY3JpcHQgaGFzIGBub1VudXNlZExvY2Fsc2AgYW5kIGBub1VudXNlZFBhcmFtZXRlcnNgXG4gICAgICAgICduby11c2VsZXNzLWNvbnN0cnVjdG9yJzogJ3dhcm4nLCAvLyBodHRwczovL2dpdGh1Yi5jb20vbWlnaHR5aWFtL2VzbGludC1jb25maWctc3RhbmRhcmQtd2l0aC10eXBlc2NyaXB0L2lzc3Vlcy8yXG4gICAgICAgICd0eXBlc2NyaXB0L2FkamFjZW50LW92ZXJsb2FkLXNpZ25hdHVyZXMnOiAnZXJyb3InLFxuICAgICAgICAndHlwZXNjcmlwdC9leHBsaWNpdC1mdW5jdGlvbi1yZXR1cm4tdHlwZSc6ICdlcnJvcicsXG4gICAgICAgICd0eXBlc2NyaXB0L2V4cGxpY2l0LW1lbWJlci1hY2Nlc3NpYmlsaXR5JzogJ2Vycm9yJyxcbiAgICAgICAgJ3R5cGVzY3JpcHQvbWVtYmVyLWRlbGltaXRlci1zdHlsZSc6IFsnZXJyb3InLCB7IGRlbGltaXRlcjogJ25vbmUnIH1dLFxuICAgICAgICAndHlwZXNjcmlwdC9uby1hbmdsZS1icmFja2V0LXR5cGUtYXNzZXJ0aW9uJzogJ2Vycm9yJyxcbiAgICAgICAgJ3R5cGVzY3JpcHQvbm8tYXJyYXktY29uc3RydWN0b3InOiAnZXJyb3InLFxuICAgICAgICAndHlwZXNjcmlwdC9uby1lbXB0eS1pbnRlcmZhY2UnOiAnZXJyb3InLFxuICAgICAgICAndHlwZXNjcmlwdC9uby1uYW1lc3BhY2UnOiAnZXJyb3InLFxuICAgICAgICAndHlwZXNjcmlwdC9uby1ub24tbnVsbC1hc3NlcnRpb24nOiAnZXJyb3InLFxuICAgICAgICAndHlwZXNjcmlwdC9uby10cmlwbGUtc2xhc2gtcmVmZXJlbmNlJzogJ2Vycm9yJyxcbiAgICAgICAgJ3R5cGVzY3JpcHQvbm8tdW51c2VkLXZhcnMnOiAnZXJyb3InLFxuICAgICAgICAndHlwZXNjcmlwdC9uby11c2UtYmVmb3JlLWRlZmluZSc6IFsnZXJyb3InLCB7IGZ1bmN0aW9uczogZmFsc2UsIGNsYXNzZXM6IGZhbHNlLCB2YXJpYWJsZXM6IGZhbHNlLCB0eXBlZGVmczogZmFsc2UgfV0sXG4gICAgICAgICd0eXBlc2NyaXB0L25vLXZhci1yZXF1aXJlcyc6ICdlcnJvcicsXG4gICAgICAgICd0eXBlc2NyaXB0L3R5cGUtYW5ub3RhdGlvbi1zcGFjaW5nJzogJ2Vycm9yJ1xuICAgICAgfVxuICAgIH1cbiAgXVxufVxuIl19